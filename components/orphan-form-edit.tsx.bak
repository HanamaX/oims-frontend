"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { CalendarIcon, Loader2 } from "lucide-react"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { format, parse } from "date-fns"
import { cn } from "@/lib/utils"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { isValidEmail, isValidPhone } from "@/lib/validation"
import { OrphanDetails } from "@/lib/orphan-types"

interface OrphanFormEditProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  onSubmit: (data: any) => void
  orphan: OrphanDetails | null
}

export default function OrphanFormEdit({ open, onOpenChange, onSubmit, orphan }: OrphanFormEditProps) {  const [formData, setFormData] = useState({
    fullName: "",
    origin: "",
    guardianName: "",
    guardianEmail: "",
    guardianPhone: "",
    religion: "",
    adoptionReason: "",
    gender: "",
    bloodGroup: "",
    background: "",
  })
  
  const [dateOfBirth, setDateOfBirth] = useState<Date>()
  const [errors, setErrors] = useState({
    guardianEmail: "",
    guardianPhone: "",
  })
  const [isSubmitting, setIsSubmitting] = useState(false)
  
  // Populate form data when orphan details are available
  useEffect(() => {
    if (orphan && open) {
      // Split the full name into components (best effort)
      const nameParts = orphan.fullName.split(' ')
      const firstName = nameParts[0]
      const lastName = nameParts.length > 1 ? nameParts[nameParts.length - 1] : ""
      const middleName = nameParts.length > 2 ? nameParts.slice(1, -1).join(' ') : ""
      
      setFormData({
        firstName,
        middleName,
        lastName,
        origin: orphan.origin || "",
        guardianName: orphan.guardian?.name || "",
        guardianEmail: orphan.guardian?.email || "",
        guardianPhone: orphan.guardian?.phoneNumber || "",
        religion: orphan.religion || "",
        adoptionReason: orphan.adoptionReason || "",
        gender: orphan.gender || "",
        bloodGroup: orphan.bloodGroup || "",
        background: orphan.adoptionReason || "",
      })
      
      // Parse date of birth
      try {
        if (orphan.dateOfBirth) {
          setDateOfBirth(new Date(orphan.dateOfBirth))
        }
      } catch (error) {
        console.error("Error parsing date:", error)
      }
    }
  }, [orphan, open])

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    
    setFormData(prev => ({ ...prev, [name]: value }))
    
    // Validate specific fields
    if (name === 'guardianEmail' && value.trim() !== '') {
      if (!isValidEmail(value)) {
        setErrors(prev => ({ ...prev, guardianEmail: 'Please enter a valid email address' }))
      } else {
        setErrors(prev => ({ ...prev, guardianEmail: '' }))
      }
    }
    
    if (name === 'guardianPhone' && value.trim() !== '') {
      if (!isValidPhone(value)) {
        setErrors(prev => ({ ...prev, guardianPhone: 'Please enter a valid phone number' }))
      } else {
        setErrors(prev => ({ ...prev, guardianPhone: '' }))
      }
    }
  }
    const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)
    
    // Construct submission data - include fullName for the parent component
    const fullName = `${formData.firstName} ${formData.middleName} ${formData.lastName}`.trim();
    const submissionData = {
      ...formData,
      fullName,
      dateOfBirth: dateOfBirth ? format(dateOfBirth, 'yyyy-MM-dd') : orphan?.dateOfBirth,
    }
    
    // Submit the data
    onSubmit(submissionData)
    setIsSubmitting(false)
  }
    return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto bg-white">
        <DialogHeader>
          <DialogTitle>Edit Orphan Information</DialogTitle>
          <DialogDescription>
            Update the orphan's details. Click save when you're done.
          </DialogDescription>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="space-y-5 py-4">
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="fullName">Full Name</Label>
              <Input
                id="fullName"
                name="fullName"
                value={`${formData.firstName} ${formData.middleName} ${formData.lastName}`.trim()}
                onChange={(e) => {
                  const nameParts = e.target.value.split(' ');
                  const firstName = nameParts[0] || '';
                  const lastName = nameParts.length > 1 ? nameParts[nameParts.length - 1] : '';
                  const middleName = nameParts.length > 2 ? nameParts.slice(1, -1).join(' ') : '';
                  
                  setFormData(prev => ({
                    ...prev,
                    firstName,
                    middleName,
                    lastName
                  }));
                }}
                required
              />
            </div>
          </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="dateOfBirth">Date of Birth</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    className={cn(
                      "w-full justify-start text-left font-normal bg-white",
                      !dateOfBirth && "text-muted-foreground"
                    )}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {dateOfBirth ? format(dateOfBirth, "PPP") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0 bg-white">
                  <Calendar
                    mode="single"
                    selected={dateOfBirth}
                    onSelect={setDateOfBirth}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="origin">Origin/Place of Birth</Label>
              <Input
                id="origin"
                name="origin"
                value={formData.origin}
                onChange={handleInputChange}
                className="bg-white"
              />
            </div>
          </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="gender">Gender</Label>
              <Select
                value={formData.gender}
                onValueChange={(value) => setFormData(prev => ({ ...prev, gender: value }))}
              >
                <SelectTrigger className="bg-white">
                  <SelectValue placeholder={formData.gender ? 
                    formData.gender === "M" ? "Male" : 
                    formData.gender === "F" ? "Female" : 
                    formData.gender === "O" ? "Other" : "Select gender"
                    : "Select gender"} 
                  />
                </SelectTrigger>
                <SelectContent className="bg-white">
                  <SelectItem value="M">Male</SelectItem>
                  <SelectItem value="F">Female</SelectItem>
                  <SelectItem value="O">Other</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="bloodGroup">Blood Group</Label>
              <Select
                value={formData.bloodGroup}
                onValueChange={(value) => setFormData(prev => ({ ...prev, bloodGroup: value }))}
              >
                <SelectTrigger className="bg-white">
                  <SelectValue placeholder={formData.bloodGroup || "Select blood group"} />
                </SelectTrigger>
                <SelectContent className="bg-white">
                  <SelectItem value="A+">A+</SelectItem>
                  <SelectItem value="A-">A-</SelectItem>
                  <SelectItem value="B+">B+</SelectItem>
                  <SelectItem value="B-">B-</SelectItem>
                  <SelectItem value="AB+">AB+</SelectItem>
                  <SelectItem value="AB-">AB-</SelectItem>
                  <SelectItem value="O+">O+</SelectItem>
                  <SelectItem value="O-">O-</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
            <div className="space-y-2">
            <Label htmlFor="religion">Religion</Label>
            <Select
              value={formData.religion}
              onValueChange={(value) => setFormData(prev => ({ ...prev, religion: value }))}
            >
              <SelectTrigger className="bg-white">
                <SelectValue placeholder={formData.religion || "Select religion"} />
              </SelectTrigger>
              <SelectContent className="bg-white">
                <SelectItem value="Christianity">Christianity</SelectItem>
                <SelectItem value="Islam">Islam</SelectItem>
                <SelectItem value="Hinduism">Hinduism</SelectItem>
                <SelectItem value="Buddhism">Buddhism</SelectItem>
                <SelectItem value="Judaism">Judaism</SelectItem>
                <SelectItem value="Other">Other</SelectItem>
              </SelectContent>
            </Select>
          </div>
            <div className="space-y-2">
            <Label htmlFor="background">Background Information</Label>
            <Textarea
              id="background"
              name="background"
              value={formData.background}
              onChange={handleInputChange}
              placeholder="Provide information about the orphan's background"
              rows={4}
              className="resize-none bg-white"
            />
          </div>
            <div className="pt-4">
            <h3 className="text-lg font-medium mb-2">Guardian Information</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="guardianName">Guardian Name</Label>
                <Input
                  id="guardianName"
                  name="guardianName"
                  value={formData.guardianName}
                  onChange={handleInputChange}
                  className="bg-white"
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="guardianPhone">Guardian Phone</Label>
                <Input
                  id="guardianPhone"
                  name="guardianPhone"
                  value={formData.guardianPhone}
                  onChange={handleInputChange}
                  className="bg-white"
                />
                {errors.guardianPhone && (
                  <p className="text-sm text-red-500">{errors.guardianPhone}</p>
                )}
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="guardianEmail">Guardian Email</Label>
                <Input
                  id="guardianEmail"
                  name="guardianEmail"
                  type="email"
                  value={formData.guardianEmail}
                  onChange={handleInputChange}
                  className="bg-white"
                />
                {errors.guardianEmail && (
                  <p className="text-sm text-red-500">{errors.guardianEmail}</p>
                )}
              </div>
            </div>
          </div>
          
          <DialogFooter>
            <Button 
              type="button" 
              variant="outline" 
              onClick={() => onOpenChange(false)}
              disabled={isSubmitting}
            >
              Cancel
            </Button>
            <Button 
              type="submit"
              disabled={isSubmitting || !!errors.guardianEmail || !!errors.guardianPhone}
            >
              {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              Save Changes
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  )
}
